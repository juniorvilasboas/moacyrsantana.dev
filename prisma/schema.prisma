generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  isActive      String    @default("1") @db.Char(1)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Level {
  id                 String     @id @default(cuid())
  item               Int        @default(autoincrement())
  value              String     @db.VarChar(255)
  label              String     @db.VarChar(255)
  description        String?    @db.VarChar(255)
  skill              Skill[]
  LanguageUnderstand Language[] @relation("levelUnderstand")
  LanguageSpeak      Language[] @relation("levelSpeak")
  LanguageWrite      Language[] @relation("levelWrite")
}

model Language {
  id              String @id @default(cuid())
  item            Int    @default(autoincrement())
  name            String @db.VarChar(255)
  understandingId String @db.VarChar(255)
  levelUnderstand Level? @relation("levelUnderstand", fields: [understandingId], references: [id])
  speakingId      String @db.VarChar(255)
  levelSpeak      Level? @relation("levelSpeak", fields: [speakingId], references: [id])
  writingId       String @db.VarChar(255)
  levelWrite      Level? @relation("levelWrite", fields: [writingId], references: [id])
}

model Education {
  id          String    @id @default(cuid())
  tipo        String    @db.VarChar(255)
  institution String    @db.VarChar(255)
  site        String?   @db.VarChar(255)
  degree      String    @db.VarChar(255)
  subject     String    @db.VarChar(255)
  courseload  Int?
  begin       DateTime
  end         DateTime?
}

model Experience {
  id          String    @id @default(cuid())
  role        String    @db.VarChar(255)
  tipo        String    @db.VarChar(255)
  company     String    @db.VarChar(255)
  city        String    @db.VarChar(255)
  country     String    @db.VarChar(255)
  description String    @db.VarChar(255)
  begin       DateTime
  end         DateTime?
}

model Information {
  id      String @id @default(cuid())
  phone   String @db.VarChar(255)
  address String @db.VarChar(255)
  city    String @db.VarChar(255)
  country String @db.VarChar(255)
  cep     String @db.VarChar(255)
}

model Portifolio {
  id          String  @id @default(cuid())
  layout      String  @db.VarChar(255)
  name        String  @db.VarChar(255)
  site        String? @db.VarChar(255)
  category    String  @db.VarChar(255)
  description String  @db.VarChar(255)
  skills      Skill[] @relation("PortifolioToSkil")
}

model Skill {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(255)
  site       String?      @db.VarChar(255)
  ext        String       @db.VarChar(255)
  tipo       String       @db.VarChar(255)
  levelId    String?
  level      Level?       @relation(fields: [levelId], references: [id])
  Portifolio Portifolio[] @relation("PortifolioToSkil")
}
